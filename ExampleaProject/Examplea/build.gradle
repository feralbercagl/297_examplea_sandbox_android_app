// Ideas from http://stackoverflow.com/questions/16649397/robolectric-with-gradle-resources-not-found?rq=1
// were used to add in Robolectric tests.

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'android'

sourceSets {
    testLocal {
        project.ext.set("workingDir", '')
        java.srcDir file('test/src')
        resources.srcDir file('test/resources')
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    compile project(':android-support-v7-appcompat')
    compile project(':PlayServices')
    compile project(':AnyPresenceLibrary')
    compile project(':HoloGraphLibrary')

    // Tests
    testLocalCompile fileTree(dir: 'libs', include: '*.jar')

    testLocalCompile project(':android-support-v7-appcompat')
    testLocalCompile project(':PlayServices')
    testLocalCompile project(':AnyPresenceLibrary')
    testLocalCompile 'junit:junit:4.8.2'
    testLocalCompile 'org.mockito:mockito-all:1.9.5'
    testLocalCompile 'org.robolectric:robolectric:2.2'
    testLocalCompile 'com.google.android:android:4.1.1.4'
}

android {
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    signingConfigs {
        debug {
            if (Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_UNIX)) {
                storeFile file("$System.env.HOME" + "/.android/debug.keystore")
            } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                storeFile file("$System.env.USERPATH" + "/.android/debug.keystore")
            } else {
                ant.fail("Do not know where the debug keystore is located with this environment")
            }
        }

        release {
            // the file should live in the project's main app module
            storeFile file("release.keystore")
            storePassword "$System.env.KEY_STORE_PASSWORD"
            keyAlias "$System.env.KEY_ALIAS"
            keyPassword "$System.env.KEY_PASSWORD"
        }
    }

    buildTypes {
        release {
            debuggable false
            runProguard true
            proguardFile "proguard.cfg"
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    compileSdkVersion 19
    buildToolsVersion "20.0.0"

    defaultConfig {
        testPackageName "com.anypresence.android.examplea.test"
        minSdkVersion 9
        targetSdkVersion 19
    }
}


task localTest(type: Test, dependsOn: assembleDebug) {
    jvmArgs "-Xmx1024m", "-XX:MaxPermSize=128m"

    testClassesDir = sourceSets.testLocal.output.classesDir
    include('**/*Test.*')

    android.sourceSets.main.java.srcDirs.each { dir ->
        def buildDir
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
          buildDir = dir.getAbsolutePath().split('\\\\')
        } else {
          buildDir = dir.getAbsolutePath().split('/')
        }

        // Find main project directory (i.e. remove src)
        buildDir =  (buildDir[0..3] + ['build', 'classes', 'debug']).join('/')

        sourceSets.testLocal.compileClasspath += files(buildDir)
        sourceSets.testLocal.runtimeClasspath += files(buildDir)
    }

    classpath = sourceSets.testLocal.runtimeClasspath
}